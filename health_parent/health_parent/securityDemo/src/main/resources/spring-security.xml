<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
<!--注意：
    所有的url都必须以/打头，否则启动报错
-->

    <!--静态资源过滤
        用户无须登陆即可访问
        pattern: 指定url页面
        security: none匿名访问

        /*    这个目录下所有的文件
              /aa.js
        /**   这个目录下及其子目录下的所有文件
               /a/a/b/c/s/a
    -->
    <security:http pattern="/fail.html" security="none"/>
    <security:http pattern="/login.html" security="none"/>

    <!--url拦截规则配置
        auto-config: 自动配置，创建登陆页面，自动处理登陆请求，密码匹配.....
        use-expressions: true: 使用spel表达 hasAnyRole hasAny....
                         false: 不使用表达式，必须使用ROLE_打头, ROLE_ADMIN，否则启动时会报错
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--intercept-url拦截url
            pattern: 匹配的url格式 /** 所有的请求
            access: 标定的权限，使用角色名。当use-expressions=true就使用表达式has...
        -->
        <!--只要认证通过就可以访问
            isAuthenticated: 是否认证过了，是否登陆，登陆就可以访问
        -->
        <security:intercept-url pattern="/index.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面
        hasAuthority： 登陆用户有这个权限

        -->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面
            hasRole: 登陆用户拥有个这角色
        -->
        <security:intercept-url pattern="/c.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ADMIN')" />

        <!--自定义登陆处理
            login-page: 登陆页面
            login-processing-url: 指向处理登陆验证的url或者controller  /login security自带的
            authentication-failure-url: 认证失败后跳转的地址
            default-target-url: 如果原来是从其它页面跳转到登陆页面的，登陆成功后会跳转回原来的页面
                                只有一开始就访问login.html，这时登陆成功就会跳转到default-target-url
            always-use-default-target: true，不管从哪个页面来请求，登陆成功后都跳转到default-target-url
            username-parameter: 将来认证获取登陆用户名时去request.getParameter(参数名)
            password-parameter: 将来认证获取登陆用密码时去request.getParameter(参数名)
        -->
        <security:form-login
            login-page="/login.html"
            login-processing-url="/login"
            username-parameter="abc"
            password-parameter="bcd"
            authentication-failure-url="/fail.html"
            default-target-url="/index.html"
            always-use-default-target="true"
        />
        <!--
            logout-success-url: 退出成功跳转的页面
            invalidate-session: 清除session，失效
            logout-url: 处理退出的请求地址，默认用security /logout
        -->
        <security:logout logout-success-url="/login.html" invalidate-session="true" logout-url="/logout"/>
        <!--关闭跨域访问控制-->
        <security:csrf disabled="true"/>
    </security:http>
    <!--开启注解方式权限控制
        @Before
        @After
        @Around
    -->
    <security:global-method-security pre-post-annotations="enabled" />
    <!--认证管理器-->
    <security:authentication-manager>
        <!--认证信息的提供者 user-service-ref 找这个对象-->
        <security:authentication-provider user-service-ref="myUserSerivceImp">
            <!--使用encoder对应登陆密码对应校验
                一个是从前端来的密码
                另一个是从数据库来的 userdetails.user
            -->
            <security:password-encoder ref="encoder"/>
            <!--定义为内存中写死的用户信息
            <security:user-service>
                <写死，硬编码一个用户信息，将来改为从数据库加载
                    name: 登陆用户名
                    password: 登陆密码
                    authorities: 这个用户所拥有的权限集合，多个以逗号分割，将来改成从数据库加载
                    {noop}:空操作; 无操作; 就是明文密码。

                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
            </security:user-service>
        -->
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="myUserSerivceImp" class="com.itheima.service.impl.MyUserSerivceImp"/>
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <context:component-scan base-package="com.itheima.controller"/>
</beans>